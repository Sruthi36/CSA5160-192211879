#include <stdio.h>
#include <stdint.h>

// Function to compute the greatest common divisor (GCD) using the Euclidean algorithm
uint64_t gcd(uint64_t a, uint64_t b) {
    while (b != 0) {
        uint64_t t = b;
        b = a % b;
        a = t;
    }
    return a;
}

// Main function demonstrating how to factor n using the GCD
int main() {
    // Assume n = pq, where p and q are prime factors of n
    uint64_t n = 187; // Example n (p = 11, q = 17)
    uint64_t e = 7;   // Example public key exponent (not used in this example)
    
    // Assume we know one of the plaintext blocks (m) that has a common factor with n
    uint64_t known_plaintext = 22; // Example plaintext block

    // Calculate the GCD of n and the known plaintext block
    uint64_t common_factor = gcd(n, known_plaintext);

    // If the GCD is greater than 1 and less than n, it is a prime factor of n
    if (common_factor > 1 && common_factor < n) {
        printf("Found a prime factor of n: %llu\n", common_factor);
        uint64_t other_factor = n / common_factor;
        printf("The other prime factor of n: %llu\n", other_factor);
    } else {
        printf("No useful common factor found.\n");
    }

    return 0;
}
Output:
Found a prime factor of n: 11
The other prime factor of n: 17
