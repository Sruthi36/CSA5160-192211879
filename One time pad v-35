#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define ALPHABET_SIZE 26

// Function to generate a random key stream
void generate_key_stream(int *key, int length) {
    for (int i = 0; i < length; ++i) {
        key[i] = rand() % ALPHABET_SIZE;
    }
}

// Function to encrypt plaintext using the key stream
void encrypt(const char *plaintext, char *ciphertext, const int *key, int length) {
    for (int i = 0; i < length; ++i) {
        ciphertext[i] = ((plaintext[i] - 'A') + key[i]) % ALPHABET_SIZE + 'A';
    }
    ciphertext[length] = '\0';
}

// Function to decrypt ciphertext using the key stream
void decrypt(const char *ciphertext, char *plaintext, const int *key, int length) {
    for (int i = 0; i < length; ++i) {
        plaintext[i] = ((ciphertext[i] - 'A') - key[i] + ALPHABET_SIZE) % ALPHABET_SIZE + 'A';
    }
    plaintext[length] = '\0';
}

int main() {
    srand(time(NULL));

    const char *original_plaintext = "HELLO";
    int length = strlen(original_plaintext);

    int key[length];
    char ciphertext[length + 1];
    char decrypted_text[length + 1];

    // Generate the key stream
    generate_key_stream(key, length);

    // Encrypt the plaintext
    encrypt(original_plaintext, ciphertext, key, length);

    // Decrypt the ciphertext
    decrypt(ciphertext, decrypted_text, key, length);

    // Print results
    printf("Original Plaintext: %s\n", original_plaintext);
    printf("Ciphertext: %s\n", ciphertext);
    printf("Decrypted Text: %s\n", decrypted_text);

    return 0;
}
Output
Original Plaintext: HELLO
Ciphertext: SVPBF
Decrypted Text: HELLO
