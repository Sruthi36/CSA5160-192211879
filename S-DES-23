#include <stdio.h>
#include <stdint.h>

// Simplified DES (S-DES) key and data sizes
#define KEY_SIZE 10
#define BLOCK_SIZE 8

// Simplified DES (S-DES) Functions
uint8_t sbox(uint8_t input, const uint8_t s[4][4]) {
    int row = ((input & 0x8) >> 2) | (input & 0x1);
    int col = (input & 0x6) >> 1;
    return s[row][col];
}

uint8_t f(uint8_t r, uint8_t sk) {
    uint8_t expansion_permutation = ((r & 0x1) << 3) | ((r & 0x8) >> 3) |
                                    ((r & 0x4) << 1) | ((r & 0x2) >> 1);

    uint8_t xor_result = expansion_permutation ^ sk;

    uint8_t left_sbox_input = (xor_result & 0xF0) >> 4;
    uint8_t right_sbox_input = xor_result & 0x0F;

    const uint8_t sbox1[4][4] = {
        {1, 0, 3, 2},
        {3, 2, 1, 0},
        {0, 2, 1, 3},
        {3, 1, 3, 2}
    };
    const uint8_t sbox2[4][4] = {
        {0, 1, 2, 3},
        {2, 0, 1, 3},
        {3, 0, 1, 0},
        {2, 1, 0, 3}
    };

    uint8_t left_sbox_output = sbox(left_sbox_input, sbox1);
    uint8_t right_sbox_output = sbox(right_sbox_input, sbox2);

    uint8_t sbox_output = (left_sbox_output << 2) | right_sbox_output;
    return ((sbox_output & 0x2) << 2) | ((sbox_output & 0x8) >> 1) |
           ((sbox_output & 0x4) >> 1) | ((sbox_output & 0x1) << 3);
}

uint8_t sdes(uint8_t input, uint8_t k1, uint8_t k2) {
    uint8_t left = (input & 0xF0) >> 4;
    uint8_t right = input & 0x0F;

    uint8_t temp = f(right, k1);
    left ^= temp;

    uint8_t swap = (right << 4) | left;

    left = (swap & 0xF0) >> 4;
    right = swap & 0x0F;

    temp = f(right, k2);
    left ^= temp;

    return (left << 4) | right;
}

// Key generation for S-DES
void generate_keys(uint16_t key, uint8_t *k1, uint8_t *k2) {
    uint16_t permuted_key = ((key & 0x200) >> 2) | ((key & 0x10) << 1) |
                            ((key & 0x8) << 3) | ((key & 0x80) >> 1) |
                            ((key & 0x100) >> 3) | ((key & 0x20) << 3) |
                            ((key & 0x4) << 2) | ((key & 0x2) << 3) |
                            ((key & 0x1) << 5) | ((key & 0x40) >> 4);

    uint8_t left = (permuted_key & 0x3E0) >> 5;
    uint8_t right = permuted_key & 0x1F;

    uint8_t shifted_left = ((left & 0xF) << 1) | ((left & 0x10) >> 4);
    uint8_t shifted_right = ((right & 0xF) << 1) | ((right & 0x10) >> 4);

    *k1 = ((shifted_left & 0x7) << 2) | ((shifted_left & 0x8) >> 3) |
          ((shifted_right & 0x1) << 3) | ((shifted_right & 0xE) >> 1);

    shifted_left = ((shifted_left & 0x7) << 2) | ((shifted_left & 0x8) >> 3);
    shifted_right = ((shifted_right & 0x1) << 3) | ((shifted_right & 0xE) >> 1);

    *k2 = ((shifted_left & 0x7) << 2) | ((shifted_left & 0x8) >> 3) |
          ((shifted_right & 0x1) << 3) | ((shifted_right & 0xE) >> 1);
}

// Counter mode encryption and decryption
void encryptCTR(uint8_t *plaintext, uint8_t *ciphertext, uint8_t k1, uint8_t k2, uint8_t counter, int num_blocks) {
    for (int i = 0; i < num_blocks; ++i) {
        uint8_t keystream = sdes(counter++, k1, k2);
        ciphertext[i] = plaintext[i] ^ keystream;
    }
}

void decryptCTR(uint8_t *ciphertext, uint8_t *plaintext, uint8_t k1, uint8_t k2, uint8_t counter, int num_blocks) {
    for (int i = 0; i < num_blocks; ++i) {
        uint8_t keystream = sdes(counter++, k1, k2);
        plaintext[i] = ciphertext[i] ^ keystream;
    }
}

void print_binary(uint8_t data) {
    for (int i = 7; i >= 0; --i) {
        printf("%d", (data >> i) & 1);
    }
}

int main() {
    uint8_t plaintext[] = {0x01, 0x02, 0x04};
    uint16_t key = 0x1F3;
    uint8_t counter = 0x00;
    uint8_t ciphertext[3];
    uint8_t decryptedtext[3];
    uint8_t k1, k2;

    generate_keys(key, &k1, &k2);

    printf("Original plaintext:\n");
    for (int i = 0; i < 3; ++i) {
        print_binary(plaintext[i]);
        printf(" ");
    }
    printf("\n");

    encryptCTR(plaintext, ciphertext, k1, k2, counter, 3);

    printf("Encrypted ciphertext:\n");
    for (int i = 0; i < 3; ++i) {
        print_binary(ciphertext[i]);
        printf(" ");
    }
    printf("\n");

    decryptCTR(ciphertext, decryptedtext, k1, k2, counter, 3);

    printf("Decrypted plaintext:\n");
    for (int i = 0; i < 3; ++i) {
        print_binary(decryptedtext[i]);
        printf(" ");
    }
    printf("\n");

    return 0;
}
Output:
Original plaintext:
00000001 00000010 00000100
Encrypted ciphertext:
00101111 00111100 00000010
Decrypted plaintext:
00000001 00000010 00000100
